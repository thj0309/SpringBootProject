<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.toto.spring.dao.KakaoDao">

<!-- 
1.	2018년, 2019년 각 연도별 합계 금액이 가장 많은 고객을 추출하는 API 개발.(단, 취소여부가 ‘Y’ 거래는 취소된 거래임, 합계 금액은 거래금액에서 수수료를 차감한 금액임)
년도 / 성명 / 계좌번호 / 합계
 -->

	<select id="selectQuestion01" resultType="HashMap">
		/* [KakaoMapper.xml][selectQuestion01] */
		WITH TEMP AS (
		SELECT 
			SUBSTR(A.TRANDATE, 1, 4) AS TRANYEAR
			, B.ACCOUNTNM
			, B.ACCOUNTNB
			, SUM(A.CHARGE-A.COMMISSION) AS SUMAMT
		FROM TB_TRANPRSTS A
  INNER JOIN TB_ACCOUNTINFO B ON A.ACCOUNTNB = B.ACCOUNTNB
		WHERE 1=1
		AND A.CANCLEYN = 'N'
		GROUP BY SUBSTR(A.TRANDATE, 1, 4), B.ACCOUNTNM, B.ACCOUNTNB
		ORDER BY TRANYEAR,SUM(A.CHARGE-A.COMMISSION)  DESC
		) 
		SELECT * FROM TEMP A WHERE TRANYEAR = '2018' AND ROWNUM = 1
		UNION ALL
		SELECT * FROM TEMP A WHERE TRANYEAR = '2019' AND ROWNUM = 1
 	</select>

	<select id="selectQuestion01_JUnit" resultType="HashMap">
		/* [KakaoMapper.xml][selectQuestion01_JUnit] */
		WITH TEMP AS (
		SELECT 
			SUBSTR(A.TRANDATE, 1, 4) AS TRANYEAR
			, B.ACCOUNTNM
			, B.ACCOUNTNB
			, SUM(A.CHARGE-A.COMMISSION) AS SUMAMT
		FROM TB_TRANPRSTS A
  INNER JOIN TB_ACCOUNTINFO B ON A.ACCOUNTNB = B.ACCOUNTNB
		WHERE 1=1
		AND A.CANCLEYN = 'N'
		GROUP BY SUBSTR(A.TRANDATE, 1, 4), B.ACCOUNTNM, B.ACCOUNTNB
		ORDER BY TRANYEAR,SUM(A.CHARGE-A.COMMISSION)  DESC
		) 
		SELECT * FROM TEMP A WHERE TRANYEAR = '2018' AND ROWNUM = 1
 	</select>
 
 <!-- 
2.	2018년 또는 2019년에 거래가 없는 고객을 추출하는 API 개발. (취소여부가 ‘Y’ 거래는 취소된 거래임)
년도 / 계좌명 / 계좌번호
 -->
 	<select id="selectQuestion02" resultType="HashMap">
		
		SELECT/* [KakaoMapper.xml][selectQuestion02] */
			 ROWNUM AS RNUM, A.*
		FROM (
			SELECT 
				'2018' TRANYEAR
				,A.ACCOUNTNM  
				,A.ACCOUNTNB  
			FROM TB_ACCOUNTINFO  A
			WHERE 1=1
			AND NOT EXISTS (SELECT 'X' FROM TB_TRANPRSTS D WHERE D.ACCOUNTNB = A.ACCOUNTNB AND D.TRANDATE LIKE '2018%' )
		UNION ALL
			SELECT 
				'2019' TRANYEAR
				,A.ACCOUNTNM  
				,A.ACCOUNTNB  
			FROM TB_ACCOUNTINFO  A
			WHERE 1=1
			AND NOT EXISTS (SELECT 'X' FROM TB_TRANPRSTS D WHERE D.ACCOUNTNB = A.ACCOUNTNB AND D.TRANDATE LIKE '2019%' )
		) A
		ORDER BY A.ACCOUNTNB ASC

 	</select>
 	
 	<select id="selectQuestion02_JUnit" resultType="HashMap">
		SELECT/* [KakaoMapper.xml][selectQuestion02_JUnit] */
			ROWNUM AS RNUM, A.*
		FROM (
			SELECT 
				'2018' TRANYEAR
				,A.ACCOUNTNM  
				,A.ACCOUNTNB  
			FROM TB_ACCOUNTINFO  A
			WHERE 1=1
			AND NOT EXISTS (SELECT 'X' FROM TB_TRANPRSTS D WHERE D.ACCOUNTNB = A.ACCOUNTNB AND D.TRANDATE LIKE '2018%' )
			UNION ALL
			SELECT 
				'2019' TRANYEAR
				,A.ACCOUNTNM  
				,A.ACCOUNTNB  
			FROM TB_ACCOUNTINFO  A
			WHERE 1=1
			AND NOT EXISTS (SELECT 'X' FROM TB_TRANPRSTS D WHERE D.ACCOUNTNB = A.ACCOUNTNB AND D.TRANDATE LIKE '2019%' )
		) A
		WHERE ROWNUM = 1
		ORDER BY A.ACCOUNTNB ASC
	</select>
 
 <!-- 
3.	연도별 관리점별 거래금액 합계를 구하고 합계금액이 큰 순서로 출력하는 API 개발.( 취소여부가 ‘Y’ 거래는 취소된 거래임)
연도별 / {관리점명 / 관리점코드 / 관리자별 거래금액 합계}
 -->
 	<select id="selectTranYear" resultType="HashMap">
	 	SELECT /* [KakaoMapper.xml][selectTranYear] 미사용 */
			DISTINCT SUBSTR(C.TRANDATE, 1, 4)  AS TRANYEAR
		FROM TB_ACCOUNTINFO A
		INNER JOIN TB_STOREMGT B ON A.STOREMGTCD = B.STOREMGTCD
		INNER JOIN TB_TRANPRSTS C ON C.ACCOUNTNB = A.ACCOUNTNB 
		WHERE 1=1
		AND C.CANCLEYN = 'N'
 	</select>
 
 	<select id="selectQuestion03" parameterType="HashMap" resultType="HashMap">
 		SELECT /* [KakaoMapper.xml][selectQuestion03] */
			A.STOREMGTCD
			, A.STOREMGTNM
			, SUM(C.CHARGE-C.COMMISSION) AS SUMAMT
			, SUBSTR(C.TRANDATE, 1, 4) AS TRANYEAR
		FROM (SELECT DISTINCT STOREMGTCD, STOREMGTNM FROM TB_STOREMGT) A
  INNER JOIN TB_ACCOUNTINFO B 	ON B.STOREMGTCD = A.STOREMGTCD
  INNER JOIN TB_TRANPRSTS C 	ON C.ACCOUNTNB = B.ACCOUNTNB AND C.CANCLEYN = 'N'
		WHERE 1=1
		GROUP BY SUBSTR(C.TRANDATE, 1, 4), A.STOREMGTCD, A.STOREMGTNM
		ORDER BY SUBSTR(C.TRANDATE, 1, 4), SUM(C.CHARGE-C.COMMISSION) DESC
 	</select>
 	
 	<select id="selectQuestion03_JUnit" parameterType="HashMap" resultType="HashMap">
 		SELECT /* [KakaoMapper.xml][selectQuestion03_JUnit] */		
 			ROWNUM AS RNUM
 			, T.*
		FROM
		(
		SELECT 
		A.STOREMGTCD
					, A.STOREMGTNM
					, SUM(C.CHARGE-C.COMMISSION) AS SUMAMT
					, SUBSTR(C.TRANDATE, 1, 4) AS TRANYEAR
				FROM (SELECT DISTINCT STOREMGTCD, STOREMGTNM FROM TB_STOREMGT) A
		  INNER JOIN TB_ACCOUNTINFO B 	ON B.STOREMGTCD = A.STOREMGTCD
		  INNER JOIN TB_TRANPRSTS C 	ON C.ACCOUNTNB = B.ACCOUNTNB AND C.CANCLEYN = 'N'
				WHERE 1=1
				GROUP BY SUBSTR(C.TRANDATE, 1, 4), A.STOREMGTCD, A.STOREMGTNM
				ORDER BY SUBSTR(C.TRANDATE, 1, 4), SUM(C.CHARGE-C.COMMISSION) DESC
		) T
		WHERE 1=1
		AND ROWNUM = 1
 	</select>
 	
 <!-- 
4.	분당점과 판교점을 통폐합하여 판교점으로 관리점 이관을 하였습니다. 지점명을 입력하면 해당지점의 거래금액 합계를 출력하는 API 개발( 취소여부가 ‘Y’ 거래는 취소된 거래임,)
관리자명 / 관리점코드 / 관리점별합계
 -->
 	<update id="updateQuestion04">
 		UPDATE /* [KakaoMapper.xml][updateQuestion04] */
 			TB_ACCOUNTINFO
		SET STOREMGTCD = 'A' 	<!-- 판교점 -->
		, UPDDTM = SYSDATE
		WHERE 1=1
		AND STOREMGTCD = 'B'	<!-- 분당점 -->
 	</update>
 	
 	<select id="selectQuestion04_1" parameterType="HashMap" resultType="int">
			SELECT /* [KakaoMapper.xml][selectQuestion04_1] */
				COUNT(*) AS CNT
			FROM TB_ACCOUNTINFO A
	INNER JOIN TB_STOREMGT B ON A.STOREMGTCD = B.STOREMGTCD
	INNER JOIN TB_TRANPRSTS C ON C.ACCOUNTNB = A.ACCOUNTNB 
	WHERE 1=1
	AND C.CANCLEYN = 'N'
	AND B.STOREMGTNM = #{storeMgtNm}
 	</select>
 	
 	<select id="selectQuestion04_2" parameterType="HashMap" resultType="HashMap">
		SELECT /* [KakaoMapper.xml][selectQuestion04_2] */
			A.STOREMGTCD  
	 			, A.STOREMGTNM 
	 			, SUM(C.CHARGE-C.COMMISSION) AS SUMAMT
	 		FROM TB_STOREMGT A
	  INNER JOIN TB_ACCOUNTINFO B ON A.STOREMGTCD = B.STOREMGTCD
	  INNER JOIN TB_TRANPRSTS C ON B.ACCOUNTNB = C.ACCOUNTNB AND C.CANCLEYN = 'N'
	  	WHERE 1=1
	  	AND A.STOREMGTNM = #{storeMgtNm}
	GROUP BY  A.STOREMGTCD  
	 			, A.STOREMGTNM
	ORDER BY SUM(C.CHARGE-C.COMMISSION) DESC
 	</select>
</mapper>